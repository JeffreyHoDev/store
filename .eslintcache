[{"C:\\Users\\tnts1\\Desktop\\store\\src\\index.js":"1","C:\\Users\\tnts1\\Desktop\\store\\src\\App.js":"2","C:\\Users\\tnts1\\Desktop\\store\\src\\reportWebVitals.js":"3","C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\store\\store.js":"4","C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\root\\root-reducer.js":"5","C:\\Users\\tnts1\\Desktop\\store\\src\\page\\homepage\\home.page.jsx":"6","C:\\Users\\tnts1\\Desktop\\store\\src\\page\\fulfillpage\\fulfill.page.jsx":"7","C:\\Users\\tnts1\\Desktop\\store\\src\\page\\edititempage\\edititem.page.jsx":"8","C:\\Users\\tnts1\\Desktop\\store\\src\\page\\loginpage\\login.page.jsx":"9","C:\\Users\\tnts1\\Desktop\\store\\src\\page\\requestitempage\\request_item.page.jsx":"10","C:\\Users\\tnts1\\Desktop\\store\\src\\component\\sidebar\\sidebar.component.jsx":"11","C:\\Users\\tnts1\\Desktop\\store\\src\\page\\storelistpage\\storelist.page.jsx":"12","C:\\Users\\tnts1\\Desktop\\store\\src\\component\\topbar\\topbar.component.jsx":"13","C:\\Users\\tnts1\\Desktop\\store\\src\\page\\requestlistpage\\requestlist.page.jsx":"14","C:\\Users\\tnts1\\Desktop\\store\\src\\page\\usermanagementpage\\usermanagement.page.jsx":"15","C:\\Users\\tnts1\\Desktop\\store\\src\\component\\addItem\\addItem.component.jsx":"16","C:\\Users\\tnts1\\Desktop\\store\\src\\component\\verification\\verification.component.jsx":"17","C:\\Users\\tnts1\\Desktop\\store\\src\\component\\addUser\\adduser.component.jsx":"18","C:\\Users\\tnts1\\Desktop\\store\\src\\component\\requestItem\\requestitem.component.jsx":"19","C:\\Users\\tnts1\\Desktop\\store\\src\\component\\deleteUser\\deleteuser.component.jsx":"20","C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\requestitem\\requestitem.reducer.js":"21","C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\storeitem\\storeitem.reducer.js":"22","C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\fulfillrequest\\fulfillrequest.reducer.js":"23","C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\url\\url.reducer.js":"24","C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\user\\user.reducer.js":"25","C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\chart\\chart.reducer.js":"26","C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\scaling\\scaling.reducer.js":"27","C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\verification\\verification.reducer.js":"28","C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\storeitem\\storeitem.action.js":"29","C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\chart\\chart.action.js":"30","C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\requestitem\\requestitem.action.js":"31","C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\fulfillrequest\\fulfillrequest.action.js":"32","C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\scaling\\scaling.action.js":"33","C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\user\\user.action.js":"34","C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\verification\\verification.action.js":"35","C:\\Users\\tnts1\\Desktop\\store\\src\\component\\table\\table.component.jsx":"36","C:\\Users\\tnts1\\Desktop\\store\\src\\component\\pieChart\\piechart.component.jsx":"37","C:\\Users\\tnts1\\Desktop\\store\\src\\component\\request_item_summary\\request_item_summary.component.jsx":"38","C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\storeitem\\storeitem.constant.js":"39","C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\url\\url.constant.js":"40","C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\requestitem\\requestitem.constant.js":"41","C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\fulfillrequest\\fulfillrequest.constant.js":"42","C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\chart\\chart.constant.js":"43","C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\verification\\verification.constant.js":"44","C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\scaling\\scaling.constant.js":"45","C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\url\\url.action.js":"46","C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\user\\user.constant.js":"47","C:\\Users\\tnts1\\Desktop\\store\\src\\utilities\\export.jsx":"48","C:\\Users\\tnts1\\Desktop\\store\\src\\utilities\\pdf.jsx":"49"},{"size":847,"mtime":1611629977981,"results":"50","hashOfConfig":"51"},{"size":3018,"mtime":1616642332453,"results":"52","hashOfConfig":"51"},{"size":375,"mtime":1611545382344,"results":"53","hashOfConfig":"51"},{"size":308,"mtime":1611545382320,"results":"54","hashOfConfig":"51"},{"size":914,"mtime":1611909496367,"results":"55","hashOfConfig":"51"},{"size":4156,"mtime":1616640547464,"results":"56","hashOfConfig":"51"},{"size":4617,"mtime":1616981300174,"results":"57","hashOfConfig":"51"},{"size":5058,"mtime":1616983159225,"results":"58","hashOfConfig":"51"},{"size":2921,"mtime":1613965224071,"results":"59","hashOfConfig":"51"},{"size":10763,"mtime":1612168489540,"results":"60","hashOfConfig":"51"},{"size":2860,"mtime":1612169242760,"results":"61","hashOfConfig":"51"},{"size":7736,"mtime":1612169064355,"results":"62","hashOfConfig":"51"},{"size":1077,"mtime":1611909496352,"results":"63","hashOfConfig":"51"},{"size":2601,"mtime":1611817914190,"results":"64","hashOfConfig":"51"},{"size":2587,"mtime":1612168941264,"results":"65","hashOfConfig":"51"},{"size":4198,"mtime":1618542825855,"results":"66","hashOfConfig":"51"},{"size":2521,"mtime":1611826373495,"results":"67","hashOfConfig":"51"},{"size":3626,"mtime":1611817914168,"results":"68","hashOfConfig":"51"},{"size":3667,"mtime":1611817914171,"results":"69","hashOfConfig":"51"},{"size":2652,"mtime":1611824419491,"results":"70","hashOfConfig":"51"},{"size":5331,"mtime":1611817914204,"results":"71","hashOfConfig":"51"},{"size":2980,"mtime":1618542082731,"results":"72","hashOfConfig":"51"},{"size":1507,"mtime":1616555710683,"results":"73","hashOfConfig":"51"},{"size":550,"mtime":1611545382331,"results":"74","hashOfConfig":"51"},{"size":3277,"mtime":1611824077214,"results":"75","hashOfConfig":"51"},{"size":1699,"mtime":1611545382304,"results":"76","hashOfConfig":"51"},{"size":397,"mtime":1611909496384,"results":"77","hashOfConfig":"51"},{"size":1542,"mtime":1611545382343,"results":"78","hashOfConfig":"51"},{"size":4649,"mtime":1618543056538,"results":"79","hashOfConfig":"51"},{"size":2066,"mtime":1611545382301,"results":"80","hashOfConfig":"51"},{"size":6474,"mtime":1611817914200,"results":"81","hashOfConfig":"51"},{"size":2802,"mtime":1616980605048,"results":"82","hashOfConfig":"51"},{"size":170,"mtime":1611909496380,"results":"83","hashOfConfig":"51"},{"size":6068,"mtime":1613965996042,"results":"84","hashOfConfig":"51"},{"size":1537,"mtime":1611821134061,"results":"85","hashOfConfig":"51"},{"size":1369,"mtime":1618541491533,"results":"86","hashOfConfig":"51"},{"size":1297,"mtime":1611545382252,"results":"87","hashOfConfig":"51"},{"size":1156,"mtime":1611545382254,"results":"88","hashOfConfig":"51"},{"size":796,"mtime":1618542024947,"results":"89","hashOfConfig":"51"},{"size":127,"mtime":1611545382330,"results":"90","hashOfConfig":"51"},{"size":1208,"mtime":1611817914201,"results":"91","hashOfConfig":"51"},{"size":406,"mtime":1616555715890,"results":"92","hashOfConfig":"51"},{"size":371,"mtime":1611545382303,"results":"93","hashOfConfig":"51"},{"size":299,"mtime":1611545382341,"results":"94","hashOfConfig":"51"},{"size":134,"mtime":1611909496382,"results":"95","hashOfConfig":"51"},{"size":227,"mtime":1611545382328,"results":"96","hashOfConfig":"51"},{"size":1036,"mtime":1611824012159,"results":"97","hashOfConfig":"51"},{"size":811,"mtime":1616993958629,"results":"98","hashOfConfig":"51"},{"size":2181,"mtime":1617004630360,"results":"99","hashOfConfig":"51"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"1902imc",{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"102"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"102"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"102"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"102"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"102"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"102"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"102"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"102"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"102"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"102"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\tnts1\\Desktop\\store\\src\\index.js",[],["209","210"],"C:\\Users\\tnts1\\Desktop\\store\\src\\App.js",[],"C:\\Users\\tnts1\\Desktop\\store\\src\\reportWebVitals.js",[],"C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\store\\store.js",[],"C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\root\\root-reducer.js",[],"C:\\Users\\tnts1\\Desktop\\store\\src\\page\\homepage\\home.page.jsx",["211","212"],"import React from 'react'\r\nimport './home.scss'\r\n\r\nimport { connect } from 'react-redux'\r\n\r\nimport { Card, Spinner, Button } from 'react-bootstrap'\r\n\r\nimport BasicTable from '../../component/table/table.component'\r\n\r\nimport PieChart from '../../component/pieChart/piechart.component'\r\n\r\nimport { useState, useEffect } from 'react'\r\n\r\nimport { FETCH_FOR_PIE_ASYNC, FETCH_FOR_LINE_ASYNC } from '../../redux/chart/chart.action'\r\nimport { FETCH_ITEM_ASYNC } from '../../redux/storeitem/storeitem.action'\r\n\r\n\r\nconst HomePage = ({ fetch_pie, fetch_line, fetchItem, isFetching, storeItem }) => {\r\n\r\n    const today = new Date()\r\n    const todayDate = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\r\n    const defaultStartDate = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + '1';\r\n\r\n    useEffect(() => {\r\n        fetch_pie(defaultStartDate, todayDate)\r\n        fetch_line(defaultStartDate, todayDate)\r\n        fetchItem()\r\n    }, [])\r\n    \r\n    const [pieStartDate, piehandleStart] = useState('')\r\n    const [pieEndDate, piehandleEnd] = useState('')\r\n    // const [lineStartDate, linehandleStart] = useState('')\r\n    // const [lineEndDate, linehandleEnd] = useState('')\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                isFetching? <Spinner animation=\"border\" variant=\"success\" />\r\n                :\r\n                <div className=\"chart-page-container\">\r\n                    <Card className=\"chart-container\">\r\n                        <div className='chart-query'>\r\n                            <div className=\"start_date_container\">\r\n                                <label htmlFor=\"pie_startdate\">Start Date: </label>\r\n                                <input type=\"date\" name=\"pie_startdate\" onChange={(e) => piehandleStart(e.target.value)}></input>\r\n                            </div>\r\n                            <div className=\"end_date_container\">\r\n                                <label htmlFor=\"pie_enddate\">End Date: </label>\r\n                                <input type=\"date\" name=\"pie_enddate\" onChange={(e) => piehandleEnd(e.target.value)}></input>\r\n                            </div>\r\n                            <Button variant=\"info\" className=\"search-btn\" onClick={() => fetch_pie(pieStartDate, pieEndDate)}>Search</Button>\r\n                        </div>\r\n                        <div>\r\n                            <PieChart/>\r\n                        </div>\r\n                    </Card>\r\n                    {/* <Card className=\"chart-container\">\r\n                        <div className='chart-query'>\r\n                            <div className=\"start_date_container\">\r\n                                <label htmlFor=\"line_startdate\">Start Date: </label>\r\n                                <input type=\"date\" name=\"line_startdate\" onChange={(e) => linehandleStart(e.target.value)}></input>\r\n                            </div>\r\n                            <div className=\"end_date_container\">\r\n                                <label htmlFor=\"line_enddate\">End Date: </label>\r\n                                <input type=\"date\" name=\"line_enddate\" onChange={(e) => linehandleEnd(e.target.value)}></input>\r\n                            </div>\r\n                            <Button variant=\"info\" onClick={() => fetch_line(lineStartDate, lineEndDate)}>Search</Button>\r\n                        </div>\r\n                        <div>\r\n                            <LineChart/>\r\n                        </div>\r\n                    </Card> */}\r\n                    <div className=\"homepage-storelist\">\r\n                        <BasicTable/>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    storeItem: state.StoreItemReducer.storeItem,\r\n    isFetching: state.StoreItemReducer.is_fetching\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetch_pie: (start, end) => dispatch(FETCH_FOR_PIE_ASYNC(start, end)),\r\n    fetch_line: (start, end) => dispatch(FETCH_FOR_LINE_ASYNC(start, end)),\r\n    fetchItem: () => dispatch(FETCH_ITEM_ASYNC())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage)","C:\\Users\\tnts1\\Desktop\\store\\src\\page\\fulfillpage\\fulfill.page.jsx",["213"],"import React, { useEffect, useState } from 'react'\r\nimport './fulfill.scss'\r\n\r\nimport Export from '../../utilities/export'\r\n\r\nimport { connect } from 'react-redux'\r\n\r\nimport { ListGroup, Button, Spinner } from 'react-bootstrap'\r\nimport { useParams, Redirect } from 'react-router-dom'\r\n\r\nimport { FETCH_SINGLEREQUEST_ASYNC } from '../../redux/requestitem/requestitem.action'\r\nimport { FULFILL_REQUEST_ASYNC, CANCEL_REQUEST_ASYNC } from '../../redux/fulfillrequest/fulfillrequest.action'\r\n\r\n\r\nconst FulfillPage = ({ redirectTo, errorMessage, fetchSingleRequest, isFetching, requestDetail, itemDetail, fulfillRequest, cancelRequest }) => {\r\n    const { request_id } = useParams()\r\n    const [collected_by, handleCollector] = useState('Unknown')\r\n\r\n\r\n    useEffect(() => {\r\n        fetchSingleRequest(request_id)\r\n    }, [request_id])\r\n\r\n    if(redirectTo !== \"\"){\r\n        return <Redirect to={redirectTo} />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n        {\r\n            isFetching ? <Spinner animation=\"border\" variant=\"success\" />\r\n            :<div className='fulfill-page'>\r\n                <h2 className='fulfill-title'>Request ID: {request_id}</h2>\r\n                {\r\n                    requestDetail.length > 0 ?\r\n                    <div>\r\n                        <ListGroup variant=\"flush\">\r\n                            {   requestDetail[0][\"item_details\"].map((item, index) => {\r\n                                    return <ListGroup.Item key={index}>{`${index+1}. ${item.name} - ${item.quantity}`}</ListGroup.Item>\r\n                            })}\r\n                        </ListGroup>\r\n                        <div className='fulfill_others' >\r\n                            <label htmlFor='project'>Project:</label>\r\n                            <h6 name='project'>{requestDetail[0][\"project_name\"]}</h6>\r\n                            <label htmlFor='collect_date'>Collect Date:</label>\r\n                            <h6 name='collect_date'>{requestDetail[0][\"collection_date\"]}</h6>\r\n                            <label htmlFor='requestor'>Requestor:</label>\r\n                            <h6 name='requestor'>{requestDetail[0][\"requestor\"]}</h6>\r\n                            <label htmlFor='collector'>Collector:</label>\r\n                            <h6 name='requestor'>{requestDetail[0][\"collector\"]}</h6>\r\n                        </div>\r\n                        {\r\n                            requestDetail[0].status === \"Fulfilled\" ? <Export />\r\n                            :\r\n                            <div>\r\n                                <div className=\"collected-info\">\r\n                                    <label htmlFor=\"collected_by_input\" className=\"label_for_collected\">Collected By: </label>\r\n                                    <input type=\"text\" name=\"collected_by_input\" className=\"input_for_collected\" onChange={(e) => handleCollector(e.target.value)}/>\r\n                                    <span className=\"text-alert\">Please make sure to enter the collector person name before submit</span>\r\n                                </div>\r\n                                <div className='action-container'>\r\n                                    <Button variant=\"success\" type=\"button\" onClick={() => fulfillRequest(itemDetail, request_id, collected_by)}>Complete</Button>\r\n                                    <Button variant=\"danger\" type=\"button\" onClick={() => cancelRequest(request_id)}>Abandon</Button>\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                        {\r\n                            errorMessage !== \"\" ? <p className=\"errorMessage\">Error occured</p>: null\r\n                        }\r\n                    </div>\r\n                    : <Spinner animation=\"border\" variant=\"success\" />\r\n                }\r\n\r\n            </div>\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isFetching: state.RequestItemReducer.is_singleFetching,\r\n    requestDetail: state.RequestItemReducer.singleRequest,\r\n    itemDetail: state.RequestItemReducer.request_items_detail,\r\n    redirectTo: state.UrlReducer.redirectLink,\r\n    errorMessage: state.FulfillRequestReducer.errorMessage\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchSingleRequest: (request_id) => dispatch(FETCH_SINGLEREQUEST_ASYNC(request_id)),\r\n    fulfillRequest: (itemObj, request_id, collector) => dispatch(FULFILL_REQUEST_ASYNC(itemObj, request_id, collector)),\r\n    cancelRequest: (request_id) => dispatch(CANCEL_REQUEST_ASYNC(request_id))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FulfillPage)","C:\\Users\\tnts1\\Desktop\\store\\src\\page\\edititempage\\edititem.page.jsx",["214"],"import React, { useState, useEffect } from 'react'\r\nimport './edititem.scss'\r\n\r\nimport { connect } from 'react-redux'\r\n\r\nimport { Form, Button, Spinner } from 'react-bootstrap'\r\nimport { useParams, Redirect } from 'react-router-dom'\r\n\r\nimport { FETCH_SINGLEITEM_ASYNC, UPDATE_SINGLEITEM_ASYNC } from '../../redux/storeitem/storeitem.action'\r\n\r\nconst EditItemPage = ({ itemDetail, fetchDetail, singleItemFetching, updateItem, redirectTo }) => {\r\n    const { item_id } = useParams()\r\n\r\n    const [new_quantity, handleNewQuantity] = useState(0)\r\n    const [reserved_quantity, handleReservedQuantity] = useState(0)\r\n    const [new_notice, handleNotice] = useState('')\r\n\r\n    useEffect(() => {\r\n        fetchDetail(item_id)\r\n    }, [])\r\n\r\n    if(redirectTo.length !== 0){\r\n        return <Redirect to={`${redirectTo}`}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                itemDetail.length > 0 ?\r\n                <div className='edititem_page'>\r\n                    <h2 className=\"edititem_title\">Edit Item {item_id}</h2>\r\n                    {\r\n                        singleItemFetching ? <Spinner animation=\"border\" variant=\"success\" />\r\n                        :\r\n                        <Form>\r\n                            <Form.Group>\r\n                                <Form.Label><span>Item Name:</span> </Form.Label>\r\n                                <Form.Control plaintext readOnly defaultValue={itemDetail[0].item_name} />\r\n                            </Form.Group>\r\n                            <Form.Group>\r\n                                <Form.Label><span>Previous Available Quantities:</span> </Form.Label>\r\n                                <Form.Control plaintext readOnly defaultValue={itemDetail[0].available_quantity} />\r\n                            </Form.Group>\r\n                            <Form.Group>\r\n                                <Form.Label><span>Previous Reserved Quantities:</span> </Form.Label>\r\n                                <Form.Control plaintext readOnly defaultValue={itemDetail[0].reserved_quantity} />\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                                <Form.Label>Previous Notice</Form.Label>\r\n                                <Form.Control as=\"textarea\" rows={4} readOnly defaultValue={itemDetail[0].notice}/>\r\n                            </Form.Group>\r\n                            <Form.Group>\r\n                                <Form.Label><span>Brand:</span> </Form.Label>\r\n                                <Form.Control plaintext readOnly defaultValue={itemDetail[0].brand} />\r\n                            </Form.Group>\r\n                            <Form.Group>\r\n                                <Form.Label><span>Current Available Quantities:</span> </Form.Label>\r\n                                <Form.Control size='sm' type=\"number\" placeholder=\"Current available quantities\" defaultValue={itemDetail[0].available_quantity} min='0' onChange={(e) => handleNewQuantity(e.target.value)} />\r\n                            </Form.Group>\r\n                            <Form.Group>\r\n                                <Form.Label><span>Current Reserved Quantities:</span> </Form.Label>\r\n                                <Form.Control size='sm' type=\"number\" placeholder=\"Current reserved quantities\" defaultValue={itemDetail[0].reserved_quantity} min='0' onChange={(e) => handleReservedQuantity(e.target.value)} />\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                                <Form.Label>New Notice</Form.Label>\r\n                                <Form.Control as=\"textarea\" rows={4} onChange={(e) => handleNotice(e.target.value) }/>\r\n                            </Form.Group>\r\n                            <Button variant=\"success\" type=\"button\" \r\n                            onClick={() => updateItem({\r\n                                    \"item_id\": item_id,\r\n                                    \"available_quantity\": new_quantity,\r\n                                    \"reserved_quantity\": reserved_quantity,\r\n                                    \"notice\": new_notice\r\n                                    })\r\n                                }\r\n                            >\r\n                                Save & Edit\r\n                            </Button>\r\n                        </Form>            \r\n                    }\r\n                </div>: <Spinner animation=\"border\" variant=\"success\" />\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    itemDetail: state.StoreItemReducer.singleItem,\r\n    singleItemFetching: state.StoreItemReducer.singleItem_is_fetching,\r\n    redirectTo: state.UrlReducer.redirectLink\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchDetail: (id) => dispatch(FETCH_SINGLEITEM_ASYNC(id)),\r\n    updateItem: (obj) => dispatch(UPDATE_SINGLEITEM_ASYNC(obj))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EditItemPage)","C:\\Users\\tnts1\\Desktop\\store\\src\\page\\loginpage\\login.page.jsx",[],"C:\\Users\\tnts1\\Desktop\\store\\src\\page\\requestitempage\\request_item.page.jsx",["215","216","217","218","219"],"import { Table } from 'react-bootstrap'\r\nimport React, { useState, useMemo, useEffect } from 'react'\r\nimport './request_item.scss'\r\nimport \"react-datetime/css/react-datetime.css\";\r\nimport Datetime from 'react-datetime'\r\n\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nimport RequestItemSummary from '../../component/request_item_summary/request_item_summary.component'\r\n\r\nimport { Button, Spinner } from 'react-bootstrap'\r\n\r\nimport { connect } from 'react-redux'\r\nimport { SUBMIT_REQUEST_ASYNC, FETCH_ONE_FOR_REQUEST_ASYNC } from '../../redux/requestitem/requestitem.action'\r\nimport { FETCH_ITEM_ASYNC } from '../../redux/storeitem/storeitem.action'\r\n\r\nimport { useTable, usePagination, useFilters, useGlobalFilter, useAsyncDebounce } from 'react-table'\r\n\r\nconst RequestItemPage = ({ profile, fetch_request_one, fetch_items, errorMessage, isFetching, redirectTo, storeItems, summaryItems, submit_request}) => {\r\n\r\n    const [project_name, handleProjectName] = useState('')\r\n    const [collection_date, handleCollectionDate] = useState('')\r\n\r\n    useEffect(() => {\r\n        fetch_items()\r\n    }, [])\r\n\r\n    function GlobalFilter({\r\n        preGlobalFilteredRows,\r\n        globalFilter,\r\n        setGlobalFilter,\r\n    }) {\r\n        const count = preGlobalFilteredRows.length\r\n        const [value, setValue] = useState(globalFilter)\r\n        const onChange = useAsyncDebounce(value => {\r\n            setGlobalFilter(value || undefined)\r\n        }, 200)\r\n    \r\n        return (\r\n            <span>\r\n                <input\r\n                    className=\"form-control\"\r\n                    value={value || \"\"}\r\n                    onChange={e => {\r\n                        setValue(e.target.value);\r\n                        onChange(e.target.value);\r\n                    }}\r\n                    placeholder=\"Search Item...\"\r\n                />\r\n            </span>\r\n        )\r\n    }\r\n\r\n    const columns = useMemo(() => [\r\n        {\r\n            Header: '#',\r\n            accessor: 'item_id'\r\n        },\r\n        {\r\n            Header: 'Item',\r\n            accessor: 'item_name'\r\n        },\r\n        {\r\n            Header: 'Brand',\r\n            accessor: 'brand'\r\n        },\r\n        {\r\n            Header: 'Notice',\r\n            accessor: 'notice'\r\n        },\r\n        {\r\n            Header: 'Action',\r\n            Cell: ({row}) => {\r\n                return <Button variant=\"primary\" size=\"sm\" className=\"to-summary-btn\" onClick={() => fetch_request_one(row.original.item_id)}>Request</Button>\r\n            }\r\n        }\r\n    ], [])\r\n\r\n\r\n    const data = React.useMemo(() => storeItems,[])\r\n    const tableInstance = useTable({ columns, data, initialState: { pageIndex: 0, pageSize: 5} },useFilters, useGlobalFilter, usePagination, )\r\n        \r\n    const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n    page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    preGlobalFilteredRows,\r\n    setGlobalFilter,\r\n    state: { pageIndex, pageSize, globalFilter}\r\n    } = tableInstance\r\n\r\n    if(redirectTo.length !== 0){\r\n        return <Redirect to={redirectTo} />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n        {\r\n            isFetching ? <Spinner animation=\"border\" variant=\"success\" />\r\n            :\r\n            <div className='request_item_page'>\r\n                <div className='request_content'>\r\n                    <h2>Request Item</h2>\r\n                    <div className='request_item_others'>\r\n                        <div className='request_item_projectContainer'>\r\n                            <label htmlFor='project' className=\"request-project-label\">Project:</label>\r\n                            <input type='text' className=\"request-project-input\" onChange={(event) => handleProjectName(event.target.value)}></input>\r\n                        </div>\r\n                        <div className='request_item_collectiondateContainer'>\r\n                            <label htmlFor='request_item_collectiondate' className=\"request-date-label\">Collection Date:</label>\r\n                            <Datetime inputProps={{\r\n                                placeholder: \"Collection Date & Time\"\r\n                            }} \r\n                                onChange={handleCollectionDate}\r\n                                utc={true}\r\n                                initialValue=\"\"\r\n                                name=\"request_item_collectiondate\"\r\n                                className=\"request-date-input\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <GlobalFilter\r\n                        preGlobalFilteredRows={preGlobalFilteredRows}\r\n                        globalFilter={globalFilter}\r\n                        setGlobalFilter={setGlobalFilter}\r\n                    />\r\n                    <Table {...getTableProps()} className=\"request-item-table\">\r\n                        <thead>\r\n                        {// Loop over the header rows\r\n                        headerGroups.map(headerGroup => (\r\n                            // Apply the header row props\r\n                            <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            {// Loop over the headers in each row\r\n                            headerGroup.headers.map(column => (\r\n                                // Apply the header cell props\r\n                                <th {...column.getHeaderProps()}>\r\n                                {// Render the header\r\n                                column.render('Header')}\r\n                                </th>\r\n                            ))}\r\n                            </tr>\r\n                        ))}\r\n                        </thead>\r\n                        {/* Apply the table body props */}\r\n                        <tbody {...getTableBodyProps()}>\r\n                        {// Loop over the table rows\r\n                        page.map(row => {\r\n                            // Prepare the row for display\r\n                            prepareRow(row)\r\n                            return (\r\n                            // Apply the row props\r\n                            <tr {...row.getRowProps()}>\r\n                                {// Loop over the rows cells\r\n                                row.cells.map(cell => {\r\n                                // Apply the cell props\r\n                                return (\r\n                                    <td {...cell.getCellProps()}>\r\n                                    {// Render the cell contents\r\n                                    cell.render('Cell')}\r\n                                    </td>\r\n                                )\r\n                                })}\r\n                            </tr>\r\n                            )\r\n                        })}\r\n                        </tbody>\r\n                    </Table>\r\n                    <ul className=\"pagination-utilities\">\r\n                        <div className=\"page-item\" onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n                            First\r\n                        </div>\r\n                        <div className=\"page-item\" onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n                            {'<'}\r\n                        </div>\r\n                        <div className=\"page-item\" onClick={() => nextPage()} disabled={!canNextPage}>\r\n                            {'>'}\r\n                        </div>\r\n                        <div className=\"page-item\" onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n                            Last\r\n                        </div>\r\n                        <div>\r\n                            Page{' '}\r\n                            <strong>\r\n                                {pageIndex + 1} of {pageOptions.length}\r\n                            </strong>{' '}\r\n                        </div>\r\n                        <div className=\"form-control-container\">\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    type=\"number\"\r\n                                    defaultValue={pageIndex + 1}\r\n                                    onChange={e => {\r\n                                        const page = e.target.value ? Number(e.target.value) - 1 : 0\r\n                                        gotoPage(page)\r\n                                    }}\r\n                                    \r\n                                />\r\n                        </div>{' '}\r\n                        <select\r\n                            className=\"form-control-container\"\r\n                            value={pageSize}\r\n                            onChange={e => {\r\n                                setPageSize(Number(e.target.value))\r\n                            }}\r\n                            \r\n                        >\r\n                            {[5, 10, 20, 30, 40, 50].map(pageSize => (\r\n                                <option key={pageSize} value={pageSize}>\r\n                                    Show {pageSize}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n                    </ul>\r\n                    <Button variant=\"success\" type=\"button\" className=\"submit-request-btn\"\r\n                        onClick={() => submit_request({\r\n                            \"collection_date\": collection_date,\r\n                            \"project_name\": project_name,\r\n                            \"item_details\": summaryItems,\r\n                            \"requestor\": profile[0][\"name\"]\r\n                        })}\r\n                    >Submit Request</Button>\r\n                    {errorMessage ? <p className=\"errorMessage\">{errorMessage}</p> : null}\r\n                </div>\r\n                <div className='request_item_summary'>\r\n                    <RequestItemSummary />\r\n                </div>\r\n            </div>\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    summaryItems: state.RequestItemReducer.summaryItems,\r\n    storeItems: state.StoreItemReducer.storeItem,\r\n    isFetching: state.StoreItemReducer.is_fetching,\r\n    redirectTo: state.UrlReducer.redirectLink,\r\n    errorMessage: state.RequestItemReducer.errorMessage,\r\n    profile: state.UserReducer.profile\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetch_items: () => dispatch(FETCH_ITEM_ASYNC()),\r\n    submit_request: (dataObj) => dispatch(SUBMIT_REQUEST_ASYNC(dataObj)),\r\n    fetch_request_one: (item_id) => dispatch(FETCH_ONE_FOR_REQUEST_ASYNC(item_id))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RequestItemPage)","C:\\Users\\tnts1\\Desktop\\store\\src\\component\\sidebar\\sidebar.component.jsx",[],"C:\\Users\\tnts1\\Desktop\\store\\src\\page\\storelistpage\\storelist.page.jsx",["220","221","222","223","224","225","226","227"],"import React, {useEffect, useMemo } from 'react'\r\nimport './storelist.scss'\r\n\r\nimport { Table, Button, Spinner } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom' \r\n\r\nimport { connect } from 'react-redux'\r\nimport { DISPLAY_ADDITEM_COMPONENT, FETCH_ITEM_ASYNC } from '../../redux/storeitem/storeitem.action'\r\n\r\nimport { useTable, usePagination } from 'react-table'\r\n\r\nconst StoreListPage = ({ toggleAddItem, fetchItem, storeItem, isFetching, redirectTo }) => {\r\n\r\n    useEffect(() => {\r\n        fetchItem()\r\n    },[])\r\n\r\n    const columns = useMemo(() => [\r\n        {\r\n            Header: '#',\r\n            accessor: 'item_id'\r\n        },\r\n        {\r\n            Header: 'Item',\r\n            accessor: 'item_name'\r\n        },\r\n        {\r\n            Header: 'Available Quantities',\r\n            accessor: 'available_quantity'\r\n        },\r\n        {\r\n            Header: 'Reserved Quantities',\r\n            accessor: 'reserved_quantity'\r\n        },\r\n        {\r\n            Header: 'Brand',\r\n            accessor: 'brand'\r\n        },\r\n        {\r\n            Header: 'Notice',\r\n            accessor: 'notice'\r\n        },\r\n        {\r\n            Header: 'Action',\r\n            accessor: 'action',\r\n            Cell: ({row}) => {\r\n                return <Link className=\"link-btn\" to={`/edit/${row.original.item_id}`}>Detail</Link>\r\n            }\r\n        }\r\n    ], [])\r\n\r\n\r\n    // const data = React.useMemo(() => storeItem,[])\r\n    const data = storeItem\r\n    \r\n    const tableInstance = useTable({ columns, data, initialState: { pageIndex: 0, pageSize: 9} }, usePagination)\r\n        \r\n    const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    state: { pageIndex, pageSize}\r\n    } = tableInstance\r\n\r\n    // START - To reload this page after use add the item\r\n    if(redirectTo === 'reload'){\r\n        fetchItem()\r\n    }\r\n    // END - To reload this page after use add the item\r\n\r\n    return (\r\n        <div className=\"storelist_page\">\r\n            <h2 className=\"storelist_title\">Inhouse List</h2>\r\n            <Button variant='info' className='addItem_btn' onClick={toggleAddItem}>Add Item</Button>\r\n            {\r\n                isFetching? <Spinner animation=\"border\" variant=\"success\" />\r\n                :\r\n                <div>\r\n                    <Table {...getTableProps()}>\r\n                        <thead>\r\n                        {// Loop over the header rows\r\n                        headerGroups.map(headerGroup => (\r\n                            // Apply the header row props\r\n                            <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            {// Loop over the headers in each row\r\n                            headerGroup.headers.map(column => (\r\n                                // Apply the header cell props\r\n                                <th {...column.getHeaderProps()}>\r\n                                {// Render the header\r\n                                column.render('Header')}\r\n                                </th>\r\n                            ))}\r\n                            </tr>\r\n                        ))}\r\n                        </thead>\r\n                        {/* Apply the table body props */}\r\n                        <tbody {...getTableBodyProps()}>\r\n                        {// Loop over the table rows\r\n                        page.map(row => {\r\n                            // Prepare the row for display\r\n                            prepareRow(row)\r\n                            return (\r\n                            // Apply the row props\r\n                            <tr {...row.getRowProps()}>\r\n                                {// Loop over the rows cells\r\n                                row.cells.map(cell => {\r\n                                // Apply the cell props\r\n                                return (\r\n                                    <td {...cell.getCellProps()}>\r\n                                    {// Render the cell contents\r\n                                    cell.render('Cell')}\r\n                                    </td>\r\n                                )\r\n                                })}\r\n                            </tr>\r\n                            )\r\n                        })}\r\n                        </tbody>\r\n                    </Table>\r\n                    <ul className=\"pagination\">\r\n                        <li className=\"page-item\" onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n                            <a className=\"page-link\">First</a>\r\n                        </li>\r\n                        <li className=\"page-item\" onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n                            <a className=\"page-link\">{'<'}</a>\r\n                        </li>\r\n                        <li className=\"page-item\" onClick={() => nextPage()} disabled={!canNextPage}>\r\n                            <a className=\"page-link\">{'>'}</a>\r\n                        </li>\r\n                        <li className=\"page-item\" onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n                            <a className=\"page-link\">Last</a>\r\n                        </li>\r\n                        <li>\r\n                            <a className=\"page-link\">\r\n                                Page{' '}\r\n                                <strong>\r\n                                    {pageIndex + 1} of {pageOptions.length}\r\n                                </strong>{' '}\r\n                            </a>\r\n                        </li>\r\n                        <li className=\"page-link-container\">\r\n                            <a className=\"page-link\">\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    type=\"number\"\r\n                                    defaultValue={pageIndex + 1}\r\n                                    onChange={e => {\r\n                                        const page = e.target.value ? Number(e.target.value) - 1 : 0\r\n                                        gotoPage(page)\r\n                                    }}\r\n                                    style={{ width: '100px', height: '20px' }}\r\n                                />\r\n                            </a>\r\n                        </li>{' '}\r\n                        <select\r\n                            className=\"form-control\"\r\n                            value={pageSize}\r\n                            className=\"page-link-container\"\r\n                            onChange={e => {\r\n                                setPageSize(Number(e.target.value))\r\n                            }}\r\n                            style={{ width: '120px', height: '38px' }}\r\n                        >\r\n                            {[5, 10, 20, 30, 40, 50].map(pageSize => (\r\n                                <option key={pageSize} value={pageSize}>\r\n                                    Show {pageSize}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n                    </ul>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    storeItem: state.StoreItemReducer.storeItem,\r\n    isFetching: state.StoreItemReducer.is_fetching,\r\n    redirectTo: state.UrlReducer.redirectLink\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    toggleAddItem: () => dispatch(DISPLAY_ADDITEM_COMPONENT),\r\n    fetchItem: () => dispatch(FETCH_ITEM_ASYNC())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StoreListPage)","C:\\Users\\tnts1\\Desktop\\store\\src\\component\\topbar\\topbar.component.jsx",[],"C:\\Users\\tnts1\\Desktop\\store\\src\\page\\requestlistpage\\requestlist.page.jsx",["228"],"import React, { useEffect } from 'react'\r\nimport './requestlist.scss'\r\nimport { Table, Spinner } from 'react-bootstrap'\r\n\r\nimport { connect } from 'react-redux'\r\n\r\nimport { Link, useLocation } from 'react-router-dom'\r\n\r\nimport { FETCH_REQUEST_LIST_ASYNC, FETCH_FULFILLED_REQUEST_ASYNC } from '../../redux/requestitem/requestitem.action'\r\n\r\nconst RequestListPage = ({ fetch_fulfilled_requests, fetch_requests, isFetching, requestList }) => {\r\n\r\n    const location = useLocation()\r\n\r\n    useEffect(() => {\r\n        if(location.pathname === \"/request_list\"){\r\n            fetch_requests()\r\n        }\r\n        else {\r\n            fetch_fulfilled_requests()\r\n        }\r\n    }, [location])\r\n\r\n    return (\r\n        <div>\r\n        {\r\n            isFetching ? <Spinner animation=\"border\" variant=\"success\" />\r\n            :\r\n            <div className='requestlist_page'>\r\n                <h3>{ location.pathname === \"/request_list\" ? 'Request List' : 'History'}</h3>\r\n                <Table striped bordered hover>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>Project</th>\r\n                            <th>Requestor</th>\r\n                            <th>Collect Date</th>\r\n                            <th>Action</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {\r\n                        requestList.map(request => {\r\n                            return (    \r\n                            <tr key={request.request_id}>\r\n                                <td>{request.request_id}</td>\r\n                                <td>{request.project_name}</td>\r\n                                <td>{request.requestor}</td>\r\n                                <td>{request.collection_date}</td>\r\n                                <td><Link className=\"link-btn\" to={`/fulfill/${request.request_id}`}>Detail</Link></td>\r\n                            </tr>\r\n                            )\r\n                        })\r\n                    }\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isFetching: state.RequestItemReducer.is_fetching,\r\n    requestList: state.RequestItemReducer.requestList\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetch_requests: () => dispatch(FETCH_REQUEST_LIST_ASYNC()),\r\n    fetch_fulfilled_requests: () => dispatch(FETCH_FULFILLED_REQUEST_ASYNC())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RequestListPage)","C:\\Users\\tnts1\\Desktop\\store\\src\\page\\usermanagementpage\\usermanagement.page.jsx",["229"],"import React, { useEffect } from 'react'\r\nimport './usermanagement.scss'\r\n\r\nimport { Button, Table, Spinner } from 'react-bootstrap'\r\n\r\nimport { connect } from 'react-redux'\r\nimport { SHOW_VERIFICATION_COMPONENT } from '../../redux/verification/verification.action'\r\nimport { FETCH_USERS_ASYNC } from '../../redux/user/user.action'\r\n\r\nconst UserManagementPage = ({ userList, showVerification, fetchUsers, is_fetching, redirectTo }) => {\r\n\r\n    if(redirectTo === \"reload\"){\r\n        fetchUsers()\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchUsers()\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n        {\r\n            is_fetching ? <Spinner animation=\"border\" variant=\"success\" />\r\n            :\r\n            <div className=\"user_management_page\">\r\n                <h2 className=\"user_management_title\">User List</h2>\r\n                <Button variant='info' className='addUser_btn' onClick={() => showVerification(null)}>Add User</Button>\r\n                <Table striped bordered hover>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>Name</th>\r\n                            <th>Email</th>\r\n                            <th>Role</th>\r\n                            <th>Action</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                        userList.map(user => {\r\n                            return (\r\n                                <tr key={user.id}>\r\n                                    <td>{user.id}</td>\r\n                                    <td>{user.name}</td>\r\n                                    <td>{user.email}</td>\r\n                                    <td>{user.role}</td>\r\n                                    <td><Button variant=\"danger\" size=\"sm\" className=\"delete-btn\" onClick={() => showVerification(user.id)}>Delete</Button></td>\r\n                                </tr>\r\n                            )\r\n                        }) \r\n                        }\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    userList: state.UserReducer.user_list,\r\n    is_fetching: state.UserReducer.is_fetching,\r\n    redirectTo: state.UrlReducer.redirectLink\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    showVerification: (id) => dispatch(SHOW_VERIFICATION_COMPONENT(id)),\r\n    fetchUsers: () => dispatch(FETCH_USERS_ASYNC())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserManagementPage)","C:\\Users\\tnts1\\Desktop\\store\\src\\component\\addItem\\addItem.component.jsx",[],"C:\\Users\\tnts1\\Desktop\\store\\src\\component\\verification\\verification.component.jsx",[],"C:\\Users\\tnts1\\Desktop\\store\\src\\component\\addUser\\adduser.component.jsx",[],"C:\\Users\\tnts1\\Desktop\\store\\src\\component\\requestItem\\requestitem.component.jsx",[],"C:\\Users\\tnts1\\Desktop\\store\\src\\component\\deleteUser\\deleteuser.component.jsx",["230"],"import React, { useEffect } from 'react'\r\nimport './deleteuser.scss'\r\n\r\nimport { Button, Form, Spinner } from 'react-bootstrap'\r\n\r\nimport { connect } from 'react-redux'\r\nimport { RESET_AUTHORIZED } from '../../redux/verification/verification.action'\r\nimport { DELETE_USER_ASYNC, FETCH_SINGLEUSER_ASYNC } from '../../redux/user/user.action'\r\n\r\nconst DeleteUser = ({ singleUser, fetchUser, authorized, capturedID, resetAuthorized, deleteUserAsync, isDeleting }) => {\r\n    \r\n    useEffect(() => {\r\n        fetchUser(capturedID)\r\n    }, [capturedID])\r\n\r\n    return (\r\n        <div>\r\n        {\r\n            authorized && capturedID !== null ?\r\n            singleUser.length > 0 ?\r\n            <div>\r\n                <div className=\"deleteuser-background\" onClick={()=> resetAuthorized()}></div>\r\n                <div className=\"deleteuser-container\">\r\n                <h3>Confirm Delete?</h3>\r\n                <Form>\r\n                    <Form.Group controlId=\"formBasicEmail\">\r\n                        <Form.Label>Email address</Form.Label>\r\n                        <Form.Control type=\"email\" value={singleUser[0].email} readOnly/>\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Label>Name</Form.Label>\r\n                        <Form.Control type=\"text\" value={singleUser[0].name} readOnly/>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"exampleForm.ControlSelect1\">\r\n                        <Form.Label>Role</Form.Label>\r\n                        <Form.Control type=\"text\" value={singleUser[0].role} readOnly/>\r\n                    </Form.Group>\r\n                    <Button variant=\"danger\" type=\"button\" onClick={() => deleteUserAsync(capturedID)}>\r\n                        Delete\r\n                        {isDeleting ? <Spinner animation=\"border\" variant=\"success\" />: null}\r\n                    </Button>\r\n                </Form>\r\n                </div>\r\n            </div>: <Spinner />\r\n            : null\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    authorized: state.verificationReducer.authorized,\r\n    capturedID: state.verificationReducer.capturedID,\r\n    isDeleting: state.UserReducer.is_deleting,\r\n    isFetching: state.UserReducer.is_fetching,\r\n    singleUser: state.UserReducer.singleUser\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    resetAuthorized: () => dispatch(RESET_AUTHORIZED()),\r\n    deleteUserAsync: (user_id) => dispatch(DELETE_USER_ASYNC(user_id)),\r\n    fetchUser: (user_id) => dispatch(FETCH_SINGLEUSER_ASYNC(user_id))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DeleteUser)","C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\requestitem\\requestitem.reducer.js",["231"],"import REQUEST_ITEM_CONSTANT from './requestitem.constant'\r\n\r\nconst INITIAL_STATE = {\r\n    summaryItems: [],\r\n    errorMessage: \"\",\r\n    is_submitting: false,\r\n    showRequestComponent: false,\r\n    requestList: [],\r\n    is_fetching: false,\r\n    is_singleFetching: false,\r\n    singleRequest: [],\r\n    request_items_detail: [],\r\n    oneItemRequest: []\r\n}\r\n\r\nconst RequestItemReducer = (state=INITIAL_STATE, action) => {\r\n    switch(action.type){\r\n        case REQUEST_ITEM_CONSTANT.ADD_TO_SUMMARY:\r\n            if(action.payload.quantity >= 0){\r\n                state.summaryItems.map((item, index) => {\r\n                    if(item.name === action.payload.name){\r\n                        state.summaryItems.splice(index, 1)\r\n                        return {\r\n                            ...state,\r\n                            summaryItems: state.summaryItems.concat(action.payload),\r\n                            showRequestComponent: !state.showRequestComponent\r\n                        }\r\n                    }\r\n                })\r\n                return {\r\n                    ...state,\r\n                    summaryItems: state.summaryItems.concat(action.payload),\r\n                    showRequestComponent: !state.showRequestComponent\r\n                }\r\n            }\r\n            else {\r\n                return state\r\n            }\r\n        case REQUEST_ITEM_CONSTANT.REMOVE_FROM_SUMMARY:\r\n            let newArray = state.summaryItems.filter(item => {\r\n                return item.name !== action.payload.name\r\n            })\r\n            return {\r\n                ...state,\r\n                summaryItems: [].concat(newArray)\r\n            }\r\n        case REQUEST_ITEM_CONSTANT.SUBMIT_REQUEST_START:\r\n            return {\r\n                ...state,\r\n                is_submitting: true\r\n            }\r\n        case REQUEST_ITEM_CONSTANT.SUBMIT_REQUEST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                is_submitting: false,\r\n                errorMessage: \"\"\r\n            }\r\n        case REQUEST_ITEM_CONSTANT.SUBMIT_REQUEST_FAILED:\r\n            return {\r\n                ...state,\r\n                is_submitting: false,\r\n                errorMessage: action.payload\r\n            }\r\n        case REQUEST_ITEM_CONSTANT.FETCH_REQUEST_LIST_START:\r\n            return {\r\n                ...state,\r\n                is_fetching: true\r\n            }\r\n        case REQUEST_ITEM_CONSTANT.FETCH_REQUEST_LIST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                is_fetching: false,\r\n                errorMessage: \"\",\r\n                requestList: Array.from(action.payload)\r\n            }\r\n        case REQUEST_ITEM_CONSTANT.FETCH_REQUEST_LIST_FAILED:\r\n            return {\r\n                ...state,\r\n                is_fetching: false,\r\n                errorMessage: action.payload\r\n            }\r\n        case REQUEST_ITEM_CONSTANT.FETCH_ONE_FOR_REQUEST_START:\r\n            return {\r\n                ...state,\r\n                is_fetching: true\r\n            }\r\n        case REQUEST_ITEM_CONSTANT.FETCH_ONE_FOR_REQUEST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                is_fetching: false,\r\n                errorMessage: \"\",\r\n                oneItemRequest: Array.from(action.payload)\r\n            }\r\n        case REQUEST_ITEM_CONSTANT.FETCH_ONE_FOR_REQUEST_FAILED:\r\n            return {\r\n                ...state,\r\n                is_fetching: false,\r\n                errorMessage: action.payload\r\n            }\r\n        case REQUEST_ITEM_CONSTANT.FETCH_FULFILLED_REQUEST_START:\r\n            return {\r\n                ...state,\r\n                is_fetching: true\r\n            }\r\n        case REQUEST_ITEM_CONSTANT.FETCH_FULFILLED_REQUEST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                is_fetching: false,\r\n                errorMessage: \"\",\r\n                requestList: Array.from(action.payload)\r\n            }\r\n        case REQUEST_ITEM_CONSTANT.FETCH_FULFILLED_REQUEST_FAILED:\r\n            return {\r\n                ...state,\r\n                is_fetching: false,\r\n                errorMessage: action.payload\r\n            }\r\n        case REQUEST_ITEM_CONSTANT.FETCH_SINGLEREQUEST_START:\r\n            return {\r\n                ...state,\r\n                is_singleFetching: true\r\n            }\r\n        case REQUEST_ITEM_CONSTANT.FETCH_SINGLEREQUEST_SUCCESS: \r\n            return {\r\n                ...state,\r\n                is_singleFetching: false,\r\n                errorMessage: \"\",\r\n                singleRequest: Array.from(action.payload),\r\n                request_items_detail: Array.from(action.payload[0][\"item_details\"])\r\n            }\r\n        case REQUEST_ITEM_CONSTANT.FETCH_SINGLEREQUEST_FAILED:\r\n            return {\r\n                ...state,\r\n                is_singleFetching: false,\r\n                errorMessage: action.payload\r\n            }\r\n        case REQUEST_ITEM_CONSTANT.RESET_SUMMARY:\r\n            return {\r\n                ...state,\r\n                errorMessage: \"\",\r\n                summaryItems: []\r\n            }\r\n        case REQUEST_ITEM_CONSTANT.SHOW_REQUEST_ITEM_COMPONENT:\r\n            return {\r\n                ...state,\r\n                showRequestComponent: !state.showRequestComponent\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport default RequestItemReducer","C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\storeitem\\storeitem.reducer.js",[],"C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\fulfillrequest\\fulfillrequest.reducer.js",[],"C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\url\\url.reducer.js",[],"C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\user\\user.reducer.js",[],"C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\chart\\chart.reducer.js",[],"C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\scaling\\scaling.reducer.js",[],"C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\verification\\verification.reducer.js",[],"C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\storeitem\\storeitem.action.js",[],"C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\chart\\chart.action.js",[],"C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\requestitem\\requestitem.action.js",[],"C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\fulfillrequest\\fulfillrequest.action.js",[],"C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\scaling\\scaling.action.js",[],"C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\user\\user.action.js",[],"C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\verification\\verification.action.js",[],"C:\\Users\\tnts1\\Desktop\\store\\src\\component\\table\\table.component.jsx",["232"],"C:\\Users\\tnts1\\Desktop\\store\\src\\component\\pieChart\\piechart.component.jsx",[],"C:\\Users\\tnts1\\Desktop\\store\\src\\component\\request_item_summary\\request_item_summary.component.jsx",[],"C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\storeitem\\storeitem.constant.js",[],"C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\url\\url.constant.js",[],"C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\requestitem\\requestitem.constant.js",[],"C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\fulfillrequest\\fulfillrequest.constant.js",[],"C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\chart\\chart.constant.js",[],"C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\verification\\verification.constant.js",[],"C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\scaling\\scaling.constant.js",[],"C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\url\\url.action.js",[],"C:\\Users\\tnts1\\Desktop\\store\\src\\redux\\user\\user.constant.js",[],"C:\\Users\\tnts1\\Desktop\\store\\src\\utilities\\export.jsx",["233"],"import React from 'react';\r\n\r\nimport { PDFDownloadLink } from '@react-pdf/renderer'\r\nimport MyDocument from './pdf.jsx'\r\n\r\nimport { connect } from 'react-redux'\r\n\r\nimport { Button } from 'react-bootstrap'\r\n\r\nconst Export = ({ requestDetail }) => {\r\n\r\n    return (<div>\r\n      <div className=\"mb5\">\r\n        {/* <button onClick={this.printDocument}>Print</button> */}\r\n          <PDFDownloadLink document={<MyDocument requestDetail={requestDetail}/>} fileName={`RID_${requestDetail[0][\"request_id\"]}.pdf`}>\r\n            {({ blob, url, loading, error }) => (loading ? 'Loading document...' : 'Print')}\r\n          </PDFDownloadLink>\r\n      </div>\r\n    </div>);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  requestDetail: state.RequestItemReducer.singleRequest\r\n})\r\n\r\nexport default connect(mapStateToProps)(Export)","C:\\Users\\tnts1\\Desktop\\store\\src\\utilities\\pdf.jsx",[],{"ruleId":"234","replacedBy":"235"},{"ruleId":"236","replacedBy":"237"},{"ruleId":"238","severity":1,"message":"239","line":22,"column":87,"nodeType":"240","messageId":"241","endLine":22,"endColumn":88},{"ruleId":"242","severity":1,"message":"243","line":28,"column":8,"nodeType":"244","endLine":28,"endColumn":10,"suggestions":"245"},{"ruleId":"242","severity":1,"message":"246","line":22,"column":8,"nodeType":"244","endLine":22,"endColumn":20,"suggestions":"247"},{"ruleId":"242","severity":1,"message":"248","line":20,"column":8,"nodeType":"244","endLine":20,"endColumn":10,"suggestions":"249"},{"ruleId":"242","severity":1,"message":"250","line":26,"column":8,"nodeType":"244","endLine":26,"endColumn":10,"suggestions":"251"},{"ruleId":"252","severity":1,"message":"253","line":33,"column":15,"nodeType":"254","messageId":"255","endLine":33,"endColumn":20},{"ruleId":"242","severity":1,"message":"256","line":77,"column":8,"nodeType":"244","endLine":77,"endColumn":10,"suggestions":"257"},{"ruleId":"242","severity":1,"message":"258","line":80,"column":49,"nodeType":"244","endLine":80,"endColumn":51,"suggestions":"259"},{"ruleId":"252","severity":1,"message":"260","line":87,"column":5,"nodeType":"254","messageId":"255","endLine":87,"endColumn":9},{"ruleId":"242","severity":1,"message":"261","line":16,"column":7,"nodeType":"244","endLine":16,"endColumn":9,"suggestions":"262"},{"ruleId":"263","severity":1,"message":"264","line":132,"column":29,"nodeType":"265","endLine":132,"endColumn":54},{"ruleId":"263","severity":1,"message":"264","line":135,"column":29,"nodeType":"265","endLine":135,"endColumn":54},{"ruleId":"263","severity":1,"message":"264","line":138,"column":29,"nodeType":"265","endLine":138,"endColumn":54},{"ruleId":"263","severity":1,"message":"264","line":141,"column":29,"nodeType":"265","endLine":141,"endColumn":54},{"ruleId":"263","severity":1,"message":"264","line":144,"column":29,"nodeType":"265","endLine":144,"endColumn":54},{"ruleId":"263","severity":1,"message":"264","line":152,"column":29,"nodeType":"265","endLine":152,"endColumn":54},{"ruleId":"266","severity":1,"message":"267","line":168,"column":29,"nodeType":"268","endLine":168,"endColumn":60},{"ruleId":"242","severity":1,"message":"269","line":22,"column":8,"nodeType":"244","endLine":22,"endColumn":18,"suggestions":"270"},{"ruleId":"242","severity":1,"message":"271","line":18,"column":8,"nodeType":"244","endLine":18,"endColumn":10,"suggestions":"272"},{"ruleId":"242","severity":1,"message":"273","line":14,"column":8,"nodeType":"244","endLine":14,"endColumn":20,"suggestions":"274"},{"ruleId":"275","severity":1,"message":"276","line":20,"column":54,"nodeType":"277","messageId":"278","endLine":20,"endColumn":56},{"ruleId":"252","severity":1,"message":"279","line":11,"column":23,"nodeType":"254","messageId":"255","endLine":11,"endColumn":35},{"ruleId":"252","severity":1,"message":"280","line":8,"column":10,"nodeType":"254","messageId":"255","endLine":8,"endColumn":16},"no-native-reassign",["281"],"no-negated-in-lhs",["282"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'defaultStartDate', 'fetchItem', 'fetch_line', 'fetch_pie', and 'todayDate'. Either include them or remove the dependency array. If 'fetch_pie' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["283"],"React Hook useEffect has a missing dependency: 'fetchSingleRequest'. Either include it or remove the dependency array. If 'fetchSingleRequest' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["284"],"React Hook useEffect has missing dependencies: 'fetchDetail' and 'item_id'. Either include them or remove the dependency array. If 'fetchDetail' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["285"],"React Hook useEffect has a missing dependency: 'fetch_items'. Either include it or remove the dependency array. If 'fetch_items' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["286"],"no-unused-vars","'count' is assigned a value but never used.","Identifier","unusedVar","React Hook useMemo has a missing dependency: 'fetch_request_one'. Either include it or remove the dependency array. If 'fetch_request_one' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["287"],"React Hook React.useMemo has a missing dependency: 'storeItems'. Either include it or remove the dependency array.",["288"],"'rows' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchItem'. Either include it or remove the dependency array. If 'fetchItem' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["289"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","React Hook useEffect has missing dependencies: 'fetch_fulfilled_requests' and 'fetch_requests'. Either include them or remove the dependency array. If 'fetch_requests' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["290"],"React Hook useEffect has a missing dependency: 'fetchUsers'. Either include it or remove the dependency array. If 'fetchUsers' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["291"],"React Hook useEffect has a missing dependency: 'fetchUser'. Either include it or remove the dependency array. If 'fetchUser' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["292"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'setDatatable' is assigned a value but never used.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"293","fix":"294"},{"desc":"295","fix":"296"},{"desc":"297","fix":"298"},{"desc":"299","fix":"300"},{"desc":"301","fix":"302"},{"desc":"303","fix":"304"},{"desc":"305","fix":"306"},{"desc":"307","fix":"308"},{"desc":"309","fix":"310"},{"desc":"311","fix":"312"},"Update the dependencies array to be: [defaultStartDate, fetchItem, fetch_line, fetch_pie, todayDate]",{"range":"313","text":"314"},"Update the dependencies array to be: [fetchSingleRequest, request_id]",{"range":"315","text":"316"},"Update the dependencies array to be: [fetchDetail, item_id]",{"range":"317","text":"318"},"Update the dependencies array to be: [fetch_items]",{"range":"319","text":"320"},"Update the dependencies array to be: [fetch_request_one]",{"range":"321","text":"322"},"Update the dependencies array to be: [storeItems]",{"range":"323","text":"324"},"Update the dependencies array to be: [fetchItem]",{"range":"325","text":"326"},"Update the dependencies array to be: [fetch_fulfilled_requests, fetch_requests, location]",{"range":"327","text":"328"},"Update the dependencies array to be: [fetchUsers]",{"range":"329","text":"330"},"Update the dependencies array to be: [capturedID, fetchUser]",{"range":"331","text":"332"},[965,967],"[defaultStartDate, fetchItem, fetch_line, fetch_pie, todayDate]",[817,829],"[fetchSingleRequest, request_id]",[727,729],"[fetchDetail, item_id]",[1096,1098],"[fetch_items]",[2526,2528],"[fetch_request_one]",[2583,2585],"[storeItems]",[527,529],"[fetchItem]",[672,682],"[fetch_fulfilled_requests, fetch_requests, location]",[557,559],"[fetchUsers]",[533,545],"[capturedID, fetchUser]"]